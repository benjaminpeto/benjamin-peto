{"version":3,"sources":["assets/shockbyte_banner.webp","components/Branding/Branding.js","components/Pagination/Pagination.js","App.js","reportWebVitals.js","index.js"],"names":["Branding","className","src","banner","alt","width","height","Pagination","props","handlePageClick","event","selectedPage","selected","offset","state","perPage","setState","currentPage","loadMoreData","orgServersData","servers","errorMessage","bind","data","this","slice","pageCount","Math","ceil","length","getDataFromApi","setInterval","fetch","then","response","a","json","ok","error","message","statusText","Promise","reject","catch","toString","console","map","server","id","free_ram","allocated_ram","free_disk","allocated_disk","up_since","previousLabel","nextLabel","breakLabel","marginPagesDisplayed","pageRangeDisplayed","onPageChange","containerClassName","activeClassName","PureComponent","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.98f6164c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/shockbyte_banner.c4bd1255.webp\";","import React from \"react\";\nimport banner from \"../../assets/shockbyte_banner.webp\";\nimport \"./brading.style.css\";\n\nfunction Branding() {\n  return (\n    <div className=\"img-container\">\n      <img src={banner} alt=\"ShockByte logo\" width=\"300px\" height=\"auto\" />\n      <h1>Server Dashboard</h1>\n    </div>\n  );\n}\n\nexport default Branding;\n","import React, { PureComponent } from \"react\";\nimport ReactPaginate from \"react-paginate\";\nimport \"./pagination.style.css\";\n\nclass Pagination extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      offset: 0,\n      orgServersData: [],\n      perPage: 10,\n      currentPage: 0,\n      servers: [],\n      errorMessage: null,\n    };\n\n    this.handlePageClick = this.handlePageClick.bind(this);\n  }\n\n  // handle click event and multiply the number of the page with 10 to get to the decent page\n  handlePageClick = (event) => {\n    const selectedPage = event.selected;\n    const offset = selectedPage * this.state.perPage;\n\n    this.setState(\n      {\n        currentPage: selectedPage,\n        offset: offset,\n      },\n      () => {\n        this.loadMoreData();\n      }\n    );\n  };\n\n  //get original data with all the nodes and build them up corresponding to the requested page\n  loadMoreData() {\n    const data = this.state.orgServersData;\n    //console.log(data);\n\n    const slice = data.slice(\n      this.state.offset,\n      this.state.offset + this.state.perPage\n    );\n    this.setState({\n      //Math.ceil() to round up number if the nodes aren't add up to 10\n      pageCount: Math.ceil(data.length / this.state.perPage),\n      servers: slice,\n    });\n  }\n\n  componentDidMount() {\n    //need to make the initial call with getDataFromApi() to populate table\n    this.getDataFromApi();\n    //setInterval to make request for updating the table every 5 minutes\n    setInterval(() => {\n      this.getDataFromApi();\n    }, 300000);\n  }\n\n  getDataFromApi() {\n    // GET request for the API using fetch with handling error and print it on screen and console\n    fetch(\"https://600f10ec6c21e1001704e67a.mockapi.io/api/v1/stats\")\n      .then(async (response) => {\n        const data = await response.json();\n\n        // check for error response\n        if (!response.ok) {\n          // get error message from body or default to response statusText\n          const error = (data && data.message) || response.statusText;\n          return Promise.reject(error);\n        }\n        //console.log('data-->'+JSON.stringify(data))\n        let slice = data.slice(\n          this.state.offset,\n          this.state.offset + this.state.perPage\n        );\n        this.setState({\n          pageCount: Math.ceil(data.length / this.state.perPage),\n          orgServersData: data,\n          servers: slice,\n        });\n      })\n      .catch((error) => {\n        this.setState({ errorMessage: error.toString() });\n        console.error(\"There was an error!\", error);\n      });\n  }\n\n  render() {\n    // deconstruct state variables\n    const { errorMessage, servers, pageCount } = this.state;\n    //if error occure only error will be written on screen\n    if (errorMessage) {\n      return <div className=\"error\">There was an error: {errorMessage}</div>;\n    } else {\n      // else return the table\n      return (\n        <div className=\"wrapper\">\n          <table>\n            <thead>\n              <tr>\n                <th>ID</th>\n                <th>Free RAM</th>\n                <th>Allocated RAM</th>\n                <th>Free Disk</th>\n                <th>Allocated Disk</th>\n                <th>Running since</th>\n              </tr>\n            </thead>\n            <tbody>\n              {/* map through server's properties and print them on the table*/}\n              {servers.map((server) => (\n                <tr key={server.id}>\n                  <td>{server.id}</td>\n                  <td>{server.free_ram}</td>\n                  <td>{server.allocated_ram}</td>\n                  <td>{server.free_disk}</td>\n                  <td>{server.allocated_disk}</td>\n                  <td>{server.up_since}</td>\n                </tr>\n              ))}\n            </tbody>\n          </table>\n          <ReactPaginate\n            previousLabel={\"<<\"}\n            nextLabel={\">>\"}\n            breakLabel={\"...\"}\n            pageCount={pageCount}\n            marginPagesDisplayed={1}\n            pageRangeDisplayed={1}\n            onPageChange={this.handlePageClick}\n            containerClassName={\"pagination\"}\n            activeClassName={\"active\"}\n          />\n        </div>\n      );\n    }\n  }\n}\n\nexport default Pagination;\n","import React from \"react\";\nimport Branding from \"./components/Branding/Branding\";\nimport Pagination from \"./components/Pagination/Pagination\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"app-container\">\n      <Branding />\n      <Pagination />\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}